// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

enum Role {
  admin
  user
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String?
  emailVerified DateTime? @map("email_verified")
  image         String?
  number        String?
  is_active     Boolean   @default(true)
  created_at    DateTime  @default(now())
  updated_at    DateTime  @default(now()) @updatedAt
  role          Role      @default(user)

  accounts       Account[]
  availabilities Availability[]
  // matchPlayers   MatchPlayer[]
  notifications  NotificationLog[]

  playerProfile PlayerProfile? // Relación 1 a 1 opcional con perfil jugador

  @@map("users")
}

enum CourtSide {
  drive
  backhand
}

enum Gender {
  male
  female
}

model PlayerProfile {
  id           String        @id @default(cuid())
  user         User          @relation(fields: [userId], references: [id])
  userId       String        @unique
  category     Float?
  side         CourtSide? // <-- Nuevo campo agregado
  gender       Gender?
  ranking      Int? // Ejemplo de dato extra de jugador
  wins         Int? // Partidos ganados
  losses       Int? // Partidos perdidos
  matchPlayers MatchPlayer[]

  // otros campos específicos de jugador...

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
}

model Court {
  id             String              @id @default(uuid())
  name           String
  location       String?
  availabilities CourtAvailability[]
  matches        Match[]
  createdAt      DateTime            @default(now())
}

model CourtAvailability {
  id        String @id @default(uuid())
  court     Court  @relation(fields: [courtId], references: [id])
  courtId   String
  dayOfWeek String // ej: "tuesday"
  from      String
  to        String
}

model Match {
  id              String            @id @default(uuid())
  court           Court             @relation(fields: [courtId], references: [id])
  courtId         String
  scheduledAt     DateTime
  durationMinutes Int
  resultA         Int? // puntos equipo A
  resultB         Int? // puntos equipo B
  players         MatchPlayer[]
  createdAt       DateTime          @default(now())
  NotificationLog NotificationLog[]
  status          MatchStatus       @default(pending)
}

enum MatchStatus {
  pending
  confirmed
  cancelled
}

model MatchPlayer {
  id                String        @id @default(uuid())
  match             Match         @relation(fields: [matchId], references: [id])
  matchId           String
  player            PlayerProfile @relation(fields: [playerId], references: [id])
  playerId          String
  confirmed         Boolean       @default(false)
  confirmationToken String
  confirmedAt       DateTime? // <-- Nuevo campo
  team              Int? // o enum si quieres
}

model NotificationLog {
  id              String        @id @default(uuid())
  user            User          @relation(fields: [userId], references: [id])
  userId          String
  match           Match?        @relation(fields: [matchId], references: [id])
  matchId         String?
  channel         ContactMethod
  status          String // "sent", "failed"
  sentAt          DateTime
  responseMessage String?
}

enum ContactMethod {
  whatsapp
  sms
  email
}

model Availability {
  id        String @id @default(uuid())
  user      User   @relation(fields: [userId], references: [id])
  userId    String
  dayOfWeek String // ej: "monday"
  from      String // "HH:mm"
  to        String
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
